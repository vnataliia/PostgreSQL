BOOKS:
2. PostgreSQL 11 Administration Cookbook
By Simon Riggs, Gianni Ciolli, Sudheer Kumar Meesala
May 2019

1. PostgreSQL 10 Administration Cookbook
By Simon Riggs, Gianni Ciolli
May 2018

=== 
pg_lsclusters
/var/log/postgresql

=== CONNECTING
sudo -u postgres psql --set=sslmode=require -h <host> -p 5432 -U <user> -d <db>
Uniform Resource Identifier (URI) format:
sudo -u postgres psql "postgresql://user:passwd@host:5432/db?sslmode=require"

=== ACCESSING
/var/lib/postgresql/
.pgpass
host:port:dbname:user:password
postgresql.conf:
 listen_addresses = '*'
pg_hba.conf:
 # TYPE   DATABASE   USER        CIDR-ADDRESS   METHOD 
 host      all        all          0.0.0.0/0       md5
Users: /etc/pg_service.conf, ~/.pg_service.conf

=== RUNNING
psql -c "SELECT current_time"
psql -f examples.sql

=== EXPLORING
psql --version [client]
cat $PGDATA/PG_VERSION ??
\conninfo
SELECT version(), current_database(), current_user, inet_server_addr(), inet_server_port();
\l+
SELECT datname FROM pg_database;

SELECT date_trunc('second', pg_postmaster_start_time()) AS start_time, 
       date_trunc('second', current_timestamp - pg_postmaster_start_time()) AS uptime;

SELECT count(*) FROM information_schema.tables
WHERE table_schema NOT IN ('information_schema','pg_catalog');

=== ???

SET password_encryption = 'scram-sha-256'; 

\timing on

SELECT * FROM pg_stat_activity;
SELECT pg_cancel_backend(<pid>);
SELECT pg_terminate_backend(<pid>)


DUMP/RESTORE
time pg_dump -Fc <db> -f db.dump
time pg_dump -j 8 -Fd -f db.dump

time pg_restore -j 8 --format=c -C -d postgres db.dump

postgres.conf
work_mem = 32MB
shared_buffers = 4GB
maintenance_work_mem = 2GB
full_page_writes = off
autovacuum = off
wal_buffers = -1

CREATE INDEX CONCURRENTLY <column>_index_on_<table> ON <table>(<column>);

WITH x AS (SELECT *, lead(<column>) OVER (ORDER BY <column>) = <column> + 1 AS gap FROM <table>) SELECT * FROM x WHERE NOT gap;

(echo "COPY <table> FROM STDIN;";psql -h <host> -p <port> -U <user> -d <db> -c "COPY (SELECT * FROM <table> WHERE <column> = <value>) TO STDOUT;") | psql -h <host> -p <port> -U <user> -d <DB>

SELECT left(usename,10) as user , /* client_addr,*/ date_trunc('seconds',(now() - xact_start)) AS trx, date_trunc('seconds',now() - query_start) AS run, length(query), left(query,100), left(state,8) AS status FROM pg_stat_activity WHERE state != 'idle' AND query ~ '' ORDER BY trx;

-- Missing Index?
SELECT relname, seq_scan-idx_scan AS too_much_seq,
   case when seq_scan-idx_scan>0 THEN 'Missing Index?' ELSE 'OK' END,
   pg_relation_size(relid::regclass) AS rel_size, seq_scan, idx_scan
FROM pg_stat_all_tables
WHERE schemaname='public' AND pg_relation_size(relid::regclass)>80000
ORDER BY too_much_seq DESC;

SELECT datname, temp_files AS "Temporary files",space_size_pretty(temp_bytes) AS "Size of temporary files" FROM pg_stat_database ;

SELECT * FROM pg_stat_replication;

select * from pg_stat_all_tables where relname='test';
-- dead


\df
-- PG11
SELECT p.proname AS function_name
     , pg_get_function_identity_arguments(p.oid) AS parameter_list
     , pg_get_functiondef(p.oid) AS function_def  -- CREATE FUNCTION statement
FROM   pg_proc p
LEFT   JOIN pg_depend d ON d.objid = p.oid 
                       AND d.deptype = 'e'        -- would depend on extension
WHERE  p.pronamespace = 'public'::regnamespace    -- your schema(s) of interest
AND    d.objid IS NULL                            -- no such dependency
AND    p.prokind = 'f';                           -- only plain functions

-- PG10
SELECT p.proname AS function_name,
       pg_get_function_identity_arguments(p.oid) AS parameter_list,
       pg_get_functiondef(p.oid) AS function_def 
FROM   pg_proc p
LEFT   JOIN pg_depend d ON d.objid = p.oid AND d.deptype = 'e'
WHERE  p.pronamespace = 'public'::regnamespace
AND    d.objid IS NULL 
AND    NOT proisagg AND NOT proiswindow
;
